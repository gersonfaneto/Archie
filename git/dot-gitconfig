[core]
  excludesfile = ~/.gitignore
  editor = nvim
  ignorecase = false
  autocrlf = input

[user]
  name = Gerson Ferreira
  email = gersonfaneto.dev@gmail.com

[init]
  defaultBranch = main

[github]
  user = gersonfaneto

[push]
  default = upstream

[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto

[format]
  pretty = "%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset"

[alias]
  # Use "fzf" as a file selector for "git add"
  a = "!git status --short | awk '{print $2}' | fzf | xargs git add"

  # Quickly initialize a new git repository
  i = init
  
  # Quickly diff all the current changes.
  da = diff
  
  # Select a tracked file through "fzf" and diff it
  df = "!git status --short | awk '{print $2}' | fzf | xargs git diff"

  # Select a commit through "fzf" and display the changes/diff.
  dc = "!git hist | fzf | awk '{print $2}' | xargs -I {} git diff {}^ {}"
  
  # Quickly checkout a branch
  co = checkout
  
  # Quickly checkout the "main" branch
  cm = checkout main
  
  # Quickly checkout the "dev" branch
  cd = checkout dev
  
  # Quickly checkout the "build" branch
  cb = checkout build
  
  # Quickly commit the currently staged files
  ci = commit
  
  # Quickly add and commit the currently changed files
  ca = commit --all

  # Quickly edit the last commit message.
  ce = commit --amend
  
  # Push the changes on the current local branch to the remote
  ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"
  
  # Pull the changes from the remote to the current local branch
  pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)"
  
  # Show the status of the current branch
  st = status
  
  # A minimal version of "st"
  ss = status --short --branch
  
  # Show the log for a specific commit, but only the file names are displayed
  sf = show --name-only
  
  # Quickly manipulate branches
  br = branch

  # Show all the branches
  ba = branch  --sort=-committerdate --format='%(HEAD) %(color:green)%(refname:short)%(color:reset) - %(contents:subject) %(color:blue)(%(committerdate:relative)) [%(authorname)]'
  
  # Show all the merged branches
  bm = branch --merged
  
  # Show all the non merged branches
  bn = branch --no-merged

  # Show the history of the commits in a minimal version (Message, date, author, ...) 
  hist = log --graph --topo-order --abbrev-commit --date=relative --decorate --all --boundary

  # Show all the commits made today.
  today = log --graph --topo-order --date=relative --decorate --since midnight
  
  # Show a more detailed version of the commit history (Complete message, date, author, files, ...)
  llog = log --graph --topo-order --name-status --date=relative --decorate
  
  # Show the last (from the previous day to the moment) commits in a minimal version (Message, date, author, ...) 
  last = log --graph --topo-order --date=relative --decorate --since yesterday
  
  # Show a more detailed version of the last commits made (Complete message, date, author, files, ...)
  llast = log --graph --topo-order --name-status --date=relative --decorate --since yesterday
  
  # Fetch the remote and show the commits ahead of the local branch
  incoming = "!git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..@{u}"
  
  # Fetch the remote and show the commits ahead of the remote
  outgoing = "!git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' @{u}.."
  
  # Quickly clear the staging area
  unstage = "!git status --short | awk '{print $2}' | fzf | xargs git restore --staged"

  # Uses "fzf" to select modified (tracked) files and undo their changes
  undo = "!git status --short | awk '{print $2}' | fzf | xargs git restore"
  
  # Reset to one commit behind
  rollback = reset --soft HEAD~1
  
  # List all the committers/authors on a repository and rank them
  committers = "!git log | grep Author | sort | uniq -c | sort -n -r"
