# vim:ft=gitconfig

[init]
  defaultBranch = main

[push]
  default = simple

[github]
  user = gersonfaneto

[user]
  name = Gerson Ferreira
  email = gersonfaneto.dev@gmail.com

[credential "https://github.com"]
	helper = 
	helper = !/usr/bin/gh auth git-credential

[credential "https://gist.github.com"]
	helper = 
	helper = !/usr/bin/gh auth git-credential

[core]
  editor = nvim
  pager = bat
  autocrlf = input
  ignorecase = false
  excludesfile = ~/.gitignore

[diff]
  external = difft

[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto

[alias]
  i = init
  ci = commit
  br = branch
  co = checkout
  st = status
  ss = status --short --branch

  f = fetch --all

  a = "!git status --short | awk '{print $2}' | fzf | xargs git add"

  df = "!git status --short | awk '{print $2}' | fzf | xargs git diff"
  dc = "!git log --oneline | fzf |  awk '{print $1}' | xargs -I {} git diff {}^ {}"

  ri = rebase --interactive
  rc = rebase --continue
  
  wl = worktree list
  wa = worktree add
  wr = worktree remove

  sb = "!git br --all | sed 's/^*//g' | awk '{print $1}' | rg -v remotes | fzf | xargs git checkout"
  cm = "!git checkout main"
  cd = "!git go dev"
  cb = "!git go build"
  cs = "!git go staging"
  
  ca = "!git add --all && git commit"
  ce = commit --amend
  
  ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"
  pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)"
  
  cc = "!git log --oneline | fzf | awk '{print $1}' | xargs git checkout"
  sf = "!git log --oneline | fzf | awk '{print $1}' | xargs git show --name-status --pretty='%C(green)%h%C(yellow)%d %C(blue)%ar %C(white)%s %C(blue)(%an)'"
  
  ba = branch --sort=-committerdate --format='%(HEAD) %(color:green)%(refname:short)%(color:reset) - %(contents:subject) %(color:blue)(%(committerdate:relative)) [%(authorname)]'

  hist = log --graph --abbrev-commit --date=relative --decorate --boundary --color=always --pretty='%C(green)%h%C(yellow)%d %C(blue)%ar %C(white)%s %C(blue)(%an)'
  hhist = "!git log --graph --abbrev-commit --date=relative --decorate --boundary --color=always --pretty='%C(green)%h%C(yellow)%d %C(blue)%ar %C(white)%s %C(blue)(%an)' | head"

  llog = log --graph --name-status --date=relative --color=always --pretty='%C(green)%h%C(yellow)%d %C(blue)%ar %C(white)%s %C(blue)(%an)' 

  last = log --graph --abbrev-commit --date=relative --decorate --since=midnight --color=always --pretty='%C(green)%h%C(yellow)%d %C(blue)%ar %C(white)%s %C(blue)(%an)'
  
  in = "!git fetch --quiet && git log --pretty=format:'%C(green)%h %C(white)- %C(blue)%an %C(white)- %C(cyan)%d%Creset %s %C(blue)- %ar%Creset' ..@{u}"
  out = "!git fetch --quiet && git log --pretty=format:'%C(green)%h %C(white)- %C(blue)%an %C(white)- %C(cyan)%d%Creset %s %C(blue)- %ar%Creset' @{u}.."
  
  unstage = "!git status --short | awk '{print $2}' | fzf | xargs git restore --staged"
  undo = "!git status --short | awk '{print $2}' | fzf | xargs git restore"
  rollback = reset --soft HEAD~1

  rank = "!git log | grep Author | sort | uniq -c | sort -n -r"

  go = "!f() {\
      if git rev-parse --verify $1 >/dev/null 2>&1;\
      then\
          git checkout $1;\
      else\
          git checkout -b $1;\
      fi;\
  }; f"

  publish = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
  unpublish = "!git push origin :$(git rev-parse --abbrev-ref HEAD)"
