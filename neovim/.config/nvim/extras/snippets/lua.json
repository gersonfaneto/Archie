{
  "require": {
    "prefix": "req",
    "body": [
      "require(\"${1:module}\")"
    ],
    "description": "Require a `lua` module."
  },
  "return": {
    "prefix": "rt",
    "body": [
      "return $0"
    ],
    "description": "Return a value."
  },
  "assign": {
    "prefix": "ll",
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "Create a local variable."
  },
  "declare": {
    "prefix": "l",
    "body": [
      "local ${0}"
    ],
    "description": "Define a local variable."
  },
  "locreq": {
    "prefix": "lreq",
    "body": [
      "local ${1:var} = require(\"${2:module}\")"
    ],
    "description": "Require module as a local variable."
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:{}}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a `lua` class."
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ],
    "description": "Basic `if` statement."
  },
  "else": {
    "prefix": "else",
    "body": [
      "else then",
      "\t$0",
      "end"
    ],
    "description": "Basic `else` statement."
  },
  "elseif": {
    "prefix": "elseif",
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ],
    "description": "Basic `else-if` statement."
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:i}=${2:1},${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "Basic `for` loop using range."
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for i, ${1:x} in pairs(${2:table}) do",
      "\t$0",
      "end"
    ],
    "description": "Basic `for-each` loop."
  },
  "forline": {
    "prefix": "forline",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "Basic `for` loop to read a file line-by-line."
  },
  "function": {
    "prefix": "fu",
    "body": [
      "function ${1:name}($2)",
      "\t${3:-- code}",
      "end"
    ],
    "description": "Basic function in `lua`."
  },
  "inline-function": {
    "prefix": "f=",
    "body": [
      "local ${1:name} = function($2)",
      "\t${0:-- code}",
      "end"
    ],
    "description": "Basic inline function in `lua`."
  },
  "print": {
    "prefix": "p",
    "body": [
      "print(${0})"
    ],
    "description": "Basic `print` statement."
  },
  "self": {
    "prefix": "self:",
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ],
    "description": "Define a `self` method."
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ],
    "description": "Basic `while` loop."
  },
  "lua": {
    "prefix": "lua",
    "body": [
      "lua << EOF",
      "$0",
      "EOF"
    ],
    "description": "Basic `lua` interpreted block."
  },
  "Clean Map": {
    "prefix": "cmap",
    "body": [
      "{",
      "\tmode = { $1 },",
      "\tlhs = \"$2\",",
      "\trhs = \"$3\",",
      "\toptions = { $4 },",
      "\tdescription = \"$5\",",
      "}$0"
    ],
    "description": "Custom clean mapping definition structure."
  },
  "Default Map": {
    "prefix": "dmap",
    "body": [
      "{",
      "\tmode = { $1 },",
      "\tlhs = \"$2\",",
      "\trhs = \"$3\",",
      "\toptions = { noremap = true, silent = true },",
      "\tdescription = \"$4\",",
      "}$0"
    ],
    "description": "Custom mapping definition structure with default options."
  }
}
