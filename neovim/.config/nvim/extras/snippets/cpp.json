{
  "C++": {
    "prefix": "cpp",
    "body": [
      "#include <iostream>",
      "#include <stdlib.h>",
      "\n",
      "int main(int argc, const char** argv) {",
      "\t$1",
      "",
      "\treturn 0;",
      "}"
    ],
    "description": "Basic structure of a `C++` program."
  },
  "#inc": {
    "prefix": "#inc",
    "body": [
      "#include \"$1\""
    ],
    "description": "Simple `#include` for local header file."
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": [
      "#include <$1>"
    ],
    "description": "Simple `#include` for system wide header file."
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $1 $2 "],
    "description": "Code snippet for #define \" \""
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
      "#ifdef ${DEBUG}",
      "$1",
      "#endif // ${DEBUG}"
    ],
    "description": "Simple `#ifdef` guard."
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": [
      "#ifndef ${1:1}",
      "$2",
      "#endif // !$1"
    ],
    "description": "Simple `#ifndef` guard."
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#ifdef ${1:0}",
      "$2",
      "#endif // $1"
    ],
    "description": "Simple `#if` pre-processor."
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++) {",
      "\t$3",
      "}"
    ],
    "description": "Basic `for` loop."
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--) {",
      "\t$3",
      "}"
    ],
    "description": "Basic reversed `for` loop."
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1) {",
      "\t$2",
      "}"
    ],
    "description": "Basic `while` loop."
  },
  "do": {
    "prefix": "do",
    "body": [
      "do {",
      "\t$1",
      "} while($2);"
    ],
    "description": "Basic `do-while` loop."
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for(auto ${var} : ${collection_to_loop}) {",
      "\t$1",
      "}"
    ],
    "description": "Basic `for-each` ranged block."
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "\t$2",
      "}"
    ],
    "description": "Basic `if` statement."
  },
  "else-if": {
    "prefix": "elseif",
    "body": [
      "else if ($1) {",
      "\t$2",
      "}"
    ],
    "description": "Basic `else-if` statement."
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
      "\t$1",
      "}"
    ],
    "description": "Basic `else` statement."
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${MyNamespace} {",
      "\t$1",
      "}"
    ],
    "description": "Definition of a `namespace`."
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum ${MyEnum} {",
      "\t$1",
      "};"
    ],
    "description": "Declaration of an `enum`."
  },
  "enum class": {
    "prefix": "enum class",
    "body": [
      "enum class ${MyClass} {};"
    ],
    "description": "Declaration of an `enum-class`."
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${MyClass} {",
      "public:",
      "\t${MyClass}();",
      "\t${MyClass}(${MyClass} &&) = default;",
      "\t${MyClass}(const ${MyClass} &) = default;",
      "\t${MyClass} &operator=(${MyClass} &&) = default;",
      "\t${MyClass} &operator=(const ${MyClass} &) = default;",
      "\t~${MyClass}();",
      "",
      "private:",
      "\t$1",
      "};",
      "",
      "${MyClass}::${MyClass}() {",
      "}",
      "",
      "${MyClass}::~${MyClass}() {",
      "}"
    ],
    "description": "Basic skeleton of a `class`."
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${MyClass} {",
      "public:",
      "\t${MyClass}() = default;",
      "\t${MyClass}(${MyClass} &&) = default;",
      "\t${MyClass}(const ${MyClass} &) = default;",
      "\t${MyClass} &operator=(${MyClass} &&) = default;",
      "\t${MyClass} &operator=(const ${MyClass} &) = default;",
      "\t~${MyClass}() = default;",
      "",
      "private:",
      "\t$1",
      "};"
    ],
    "description": "Basic skeleton of a `class`, with inline constructor/destructor."
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t",
      "}",
      "catch (const std::exception&) {",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct ${MyStruct} {",
      "\t$1",
      "};"
    ],
    "description": "Simple `struct` declaration."
  },
  "union": {
    "prefix": "union",
    "body": [
      "union ${MyUnion} {",
      "\t$1",
      "};"
    ],
    "description": "Simple `union` statement."
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${switch_on}) {",
      "default:",
      "\tbreak;$1",
      "}"
    ],
    "description": "Simple `switch` statement."
  },
}
